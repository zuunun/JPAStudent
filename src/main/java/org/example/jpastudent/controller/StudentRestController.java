package org.example.jpastudent.controller;

import org.example.jpastudent.model.Student;
import org.example.jpastudent.repositories.StudentRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.time.LocalDate;
import java.time.LocalTime;
import java.util.List;
import java.util.Optional;

@RestController
public class StudentRestController {

    @Autowired
    StudentRepository studentRepository;

    @GetMapping("/students")
    public List<Student> students() {
        var obj = studentRepository.findAll();
        return obj;
    }

//    @GetMapping("students/{name}")
//    public List<Student> getallstudentsbyname(@PathVariable String name) {
//        return studentRepository.findAllByName(name);
//    }
//    @GetMapping("/addstudent")
//    public List<Student> addstudent() {
//        Student std = new Student();
//        std.setBornDate(LocalDate.now());
//        std.setBornTime(LocalTime.now());
//        std.setName("hej");
//        studentRepository.save(std);
//        std.setName("Autogenerated id=" + std.getId());
//        studentRepository.save(std);
//        return studentRepository.findAll();
//    }

    @PutMapping("/student")
    @ResponseStatus(HttpStatus.CREATED)
    public Student putStudent(@RequestBody Student student) {
        Optional<Student> orgStudent = studentRepository.findById(student.getId());
        if (orgStudent.isPresent()) {
            return studentRepository.save(student);
        } else {
            Student notStudent = new Student();
            notStudent.setName("notzuzu");
            return notStudent;
        }
    }


    @PostMapping("/student")
    @ResponseStatus(HttpStatus.CREATED)
    public Student postStudent(@RequestBody Student student) {
        System.out.println(student);
        return studentRepository.save(student);
    }

    @DeleteMapping("/student/{id}")
    public ResponseEntity<String> deleteStudent(@PathVariable int id) {
        Optional<Student> orgStudent = studentRepository.findById(id);
        if (orgStudent.isPresent()) {
            studentRepository.deleteById(id);
            return ResponseEntity.ok("student deleted");
        } else {
            return ResponseEntity.status(HttpStatus.NOT_FOUND).body("Student not found");
        }
    }
}
